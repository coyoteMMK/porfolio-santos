---
// ThemeToggle.astro
import SunIcon from './icons/Sun.astro';
import MoonIcon from './icons/Moon.astro';
const { class: className} = Astro.props
---
<button
  id="theme-toggle-btn"
  class={`relative flex hover:scale-125 transition ${className}`}
>

  <span class="sr-only">Alternar tema</span>
  <SunIcon
    id="light"
    class="theme-toggle-icon size-5 transition-all"
  />
  <MoonIcon
    id="dark"
    class="theme-toggle-icon absolute size-5 transition-all"
  />
</button>

<script is:inline>
  const matchMedia = window.matchMedia('(prefers-color-scheme: dark)');

  // Obtiene preferencia: 'light' | 'dark'
  const getThemePreference = () => {
    const stored = localStorage.getItem('theme');
    if (stored === 'light' || stored === 'dark') return stored;
    return matchMedia.matches ? 'dark' : 'light';
  };

  // Muestra/oculta iconos
  const updateIcon = (theme) => {
    document.querySelectorAll('.theme-toggle-icon').forEach((el) => {
      el.style.scale = el.id === theme ? '1' : '0';
    });
  };

  // Aplica la clase 'dark' al <html> y actualiza icono
  const applyTheme = () => {
    const theme = getThemePreference();
    document.documentElement.classList[
      theme === 'dark' ? 'add' : 'remove'
    ]('dark');
    updateIcon(theme);
  };

  // Inicial
  applyTheme();

  // Si el usuario no ha elegido explÃ­citamente, responde a cambios de sistema
  matchMedia.addEventListener('change', () => {
    if (!localStorage.getItem('theme')) applyTheme();
  });

  // Al pulsar, alterna y guarda preferencia
  document
    .getElementById('theme-toggle-btn')
    .addEventListener('click', () => {
      const current = getThemePreference();
      const next = current === 'dark' ? 'light' : 'dark';
      localStorage.setItem('theme', next);
      applyTheme();
    });
</script>

