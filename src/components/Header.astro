---
import ThemeToggle from "./ThemeToggle.astro";

const navItems = [
  {
    title: "Experiencia",
    label: "experiencia",
    url: "/porfolio-santos/#experiencia",
  },
  {
    title: "Proyectos",
    label: "proyectos",
    url: "/porfolio-santos/#proyectos",
  },
  {
    title: "Sobre m√≠",
    label: "sobre-mi",
    url: "/porfolio-santos/#sobre-mi",
  },
  {
    title: "Contacto",
    label: "contacto",
    url: "mailto:santosbaden@gmail.com",
  },
];
---

<header class="header-nav top-0 z-10 fixed flex items-center justify-end w-full py-2">
  <div class="flex items-center justify-between w-full mx-auto lg:max-w-4xl md:max-w-2xl text-sm font-medium text-gray-600 dark:text-gray-200 j">
    <a class="font-normal text-lg text-gray-600 dark:text-gray-100 px-2 py-2 transition hover:text-blue-500 dark:hover:text-blue-500" href="#"
      ><strong>Portfolio</strong> Santos
      
      </a
    >
    <nav
      class="flex justify-center items-center"
    >
      {
        navItems.map((link) => (
          <a
            class="relative block px-2 py-2 transition hover:text-blue-500 dark:hover:text-blue-500"
            aria-label={link.label}
            href={link.url}
          >
            {link.title}
          </a>
        ))
      }
      <ThemeToggle />
    </nav>
  </div>


<script>
  document.addEventListener("DOMContentLoaded", () => {
    const sections = document.querySelectorAll("section");
    const navItems = document.querySelectorAll("header nav a");

    const callback = (entries: any[]) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          navItems.forEach((item) => {
            if (item.getAttribute("aria-label") == entry.target.id) {
              item.classList.add("text-blue-500");
            } else {
              item.classList.remove("text-blue-500");
            }
          });
        }
      });
    };

    const observer = new IntersectionObserver(callback, {
      root: null,
      rootMargin: "0px",
      threshold: 0.3,
    });

    sections.forEach((section) => {
      observer.observe(section);
    });

    // Cleanup function
    document.onvisibilitychange = () => {
      if (document.visibilityState === "hidden") {
        observer.disconnect();
      } else {
        sections.forEach((section) => {
          observer.observe(section);
        });
      }
    };
  });
</script>