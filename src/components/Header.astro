---
import ThemeToggle from "./ThemeToggle.astro";
import "../styles/global.css";

const navItems = [
  {
    title: "Experiencia",
    label: "experiencia",
    url: "/porfolio-santos/#experiencia",
  },
  {
    title: "Proyectos",
    label: "proyectos",
    url: "/porfolio-santos/#proyectos",
  },
  {
    title: "Sobre mí",
    label: "sobre-mi",
    url: "/porfolio-santos/#sobre-mi",
  },
];
---

<header
  class="fixed top-0 z-10 w-full py-1 md:py-2 font-medium
         text-gray-800 dark:text-blue-200 bg-transparent px-4"
>
  <div
    class="flex items-center justify-between
           w-full mx-auto text-gray-800 dark:text-gray-200
           md:max-w-2xl lg:max-w-4xl"
  >
    <!-- Nav cristal líquido -->
    <div
      class="header-nav efecto-cristal
             flex items-center md:justify-between justify-evenly
             text-sm font-medium text-gray-800 dark:text-gray-200
             rounded-full w-full md:flex-1 px-3 h-9 md:h-11"
    >
      <a
        href="#"
        class="hidden md:block font-normal text-lg
               text-gray-800 dark:text-gray-100
                transition hover:text-rose-500"
      >
        <strong>Portfolio</strong> Santos
      </a>
      <nav class="relative flex items-center space-x-4 h-9/10">
        <span
          id="nav-indicator"
          class="absolute bottom-0 h-full bg-[rgba(122,122,122,0.322)] rounded-full transition-[transform,width] dark:bg-[rgba(255,255,255,0.59)] duration-300 ease-in-out z-0 w-0 pointer-events-none"
        ></span>
        {
          navItems.map((link) => (
            <a
              href={link.url}
              aria-label={link.label}
              class="relative  transition
                   hover:text-rose-500 dark:hover:text-rose-500"
            >
              {link.title}
            </a>
          ))
        }
      </nav>
    </div>
    <div class="header-nav efecto-cristal md:p-3 p-2 ml-4">
      <!-- Ya no hace falta el <div> extra: aplicamos las clases directamente -->
      <ThemeToggle />
    </div>
  </div>
</header>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const nav = document.querySelector("header nav");
    const navLinks = Array.from(nav.querySelectorAll("a"));
    const sections = document.querySelectorAll("section[id]");
    const indicator = document.getElementById("nav-indicator");

    let currentActive = null;
    let indicatorHidden = true; // Para saber si el indicador está oculto
    let firstRun = true;
    

    function moveIndicator(link) {
      const paddingX = 12;
      const linkRect = link.getBoundingClientRect();
      const navRect = nav.getBoundingClientRect();
      const offsetX = linkRect.left - navRect.left - paddingX;

      indicator.style.width = `${linkRect.width + paddingX * 2}px`;
      indicator.style.transform = `translateX(${offsetX}px)`;
    }

    function setActiveLink(link) {
  if (!link || link === currentActive) return;

  const isFirstLink = link === navLinks[0];

  navLinks.forEach((l) => l.classList.remove("active-navitem"));
  link.classList.add("active-navitem");

  // Si es el primer render y es el primer link, muestra sin transición
  if (isFirstLink && indicatorHidden) {
    indicator.classList.remove("fade-out");
    indicator.classList.remove("fade-in");
    indicator.classList.add("fade-in");

        // Desactiva transiciones momentáneamente
    const prevTransition = indicator.style.transition;
    indicator.style.transition = "none";
    moveIndicator(link);
    // Fuerza reflow para que el cambio tenga efecto
    void indicator.offsetWidth;
    // Restaura la transición original (de CSS)
    indicator.style.transition = prevTransition;


  } else {
    indicator.classList.remove("fade-in");
    moveIndicator(link);
  }

  currentActive = link;
  indicatorHidden = false;
  firstRun = false;
}


    function updateActiveLink() {
      if (window.scrollY === 0) {
        // Oculta el indicador cuando se hace scroll al top
        currentActive = null;
        navLinks.forEach((l) => l.classList.remove("active-navitem"));

        // Solo aplica fade-out si el indicador está visible (width > 0)
        const currentWidth = indicator.offsetWidth;

        indicator.classList.remove("fade-in");
        indicator.classList.remove("fade-out");
        void indicator.offsetWidth; // forzar reflow
        indicator.classList.add("fade-out");

        indicatorHidden = true;
        return;
      }

      let closest = null;
      let minDistance = Infinity;

      sections.forEach((sec) => {
        const top = sec.getBoundingClientRect().top;
        if (top >= 0 && top < 200 && top < minDistance) {
          minDistance = top;
          closest = sec;
        }
      });

      if (
        !closest &&
        window.scrollY + window.innerHeight >= document.body.scrollHeight
      ) {
        closest = sections[sections.length - 1];
      }

      if (closest) {
        const link = navLinks.find(
          (a) => a.getAttribute("aria-label") === closest.id,
        );
        setActiveLink(link);
      }
    }

    // Smooth scroll + actualización de estado al hacer click
    navLinks.forEach((link) => {
      link.addEventListener("click", function (e) {
        const href = link.getAttribute("href");
        if (!href || !href.startsWith("#")) return;

        const id = href.slice(1);
        const target = document.getElementById(id);
        if (!target) return;

        // Si ya estamos en esa sección, deja que el browser haga su scroll normal
        if (window.location.hash === href) return;

        e.preventDefault();

        // Calcula altura del header fijo
        const header = document.querySelector("header");
        const headerHeight = header ? header.offsetHeight : 0;

        // Calcula posición absoluta del target
        const targetRect = target.getBoundingClientRect();
        const scrollTop = window.scrollY + targetRect.top - headerHeight;

        // Hace el scroll
        window.scrollTo({ top: scrollTop, behavior: "smooth" });

        // Cambia el hash de la URL después de un pequeño delay
        setTimeout(() => {
          history.replaceState(null, "", href);
        }, 400);
      });
    });

    // Scroll y resize listeners
    window.addEventListener(
      "scroll",
      () => {
        window.requestAnimationFrame(updateActiveLink);
      },
      { passive: true },
    );

    window.addEventListener("resize", updateActiveLink, { passive: true });

    // Inicializa el estado activo
    updateActiveLink();
  });
</script>

<style>
  /* Efecto cristal líquido */
  .efecto-cristal {
    position: relative;
    isolation: isolate;
    border-radius: 1.75rem;
    /* 28px */
    box-shadow: 0 6px 24px rgba(0, 0, 0, 0.2);
  }

  .efecto-cristal::after {
    content: "";
    position: absolute;
    inset: 0;
    z-index: -1;
    border-radius: inherit;
    backdrop-filter: blur(2px);
    -webkit-backdrop-filter: blur(2px);
    filter: url(#glass-distortion);
    -webkit-filter: url(#glass-distortion);
  }

  .efecto-cristal::before {
    content: "";
    position: absolute;
    inset: 0;
    z-index: 0;
    border-radius: inherit;
    box-shadow: inset 0 0 20px -5px #ffffff;
    background-color: rgba(255, 255, 255, 0.06);
  }

  /* Asegura que el contenido quede por encima del pseudo-elemento */
  .efecto-cristal > * {
    position: relative;
    z-index: 2;
  }

  /* Animaciones para el efecto cristal líquido del scroll */
  @keyframes box-shadow-show {
    from {
      box-shadow: none;
    }

    to {
      box-shadow: 0 6px 24px rgba(0, 0, 0, 0.336);
    }
  }

  @keyframes liquid-show {
    from {
      backdrop-filter: blur(0);
      -webkit-backdrop-filter: blur(0);
      filter: none;
    }

    to {
      backdrop-filter: blur(2px);
      -webkit-backdrop-filter: blur(2px);
      filter: url(#glass-distortion);
    }
  }

  @keyframes tint-show {
    from {
      background-color: rgba(255, 255, 255, 0);
      box-shadow: none;
    }

    to {
      background-color: rgba(255, 255, 255, 0.418);
      box-shadow: inset 0 0 1.5px 1.5px #ffffff;
    }
  }

  @keyframes box-shadow-show-dark {
    from {
      box-shadow: none;
    }

    to {
      box-shadow: 0 6px 24px rgba(136, 136, 136, 0.18);
    }
  }

  @keyframes tint-show-dark {
    from {
      background-color: rgba(17, 24, 39, 0);
      box-shadow: none;
    }

    to {
      background-color: rgba(32, 32, 32, 0.322);
      box-shadow: inset 0 0 1.5px 1.5px rgb(0, 0, 0);
    }
  }

  /* Estilos para los enlaces de navegación activos*/
  /* Asegura que el a activo estire toda la altura del header-nav */
  .active-navitem {
    color: #ff1818;
    transition: all 0.2s;
  }

  #nav-indicator.fade-in {
    opacity: 0;
    animation: fadeIn 0.3s ease forwards;
  }

  #nav-indicator.fade-out {
    animation: fadeOut 0.3s ease forwards;
  }

  @keyframes fadeIn {
    to {
      opacity: 1;
    }
  }

  @keyframes fadeOut {
    to {
      opacity: 0;
    }
  }
</style>
