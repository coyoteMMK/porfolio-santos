---
import { boolean } from "astro:schema";
import HtmlIcon from "./icons/Html.astro";
import JsIcon from "./icons/Js.astro";
import CssIcon from "./icons/Css.astro";
import AstroIcon from "./icons/Astro.astro";

import ProyectsItem from "./PoyectsItem.astro";

const TAGS = {
    HTML: {
        name: "HTML",
        icon: HtmlIcon,
    },
    CSS: {
        name: "CSS",
        icon: CssIcon,
    },
    JavaScript: {
        name: "JavaScript",
        icon: JsIcon,
    },
    Astro: {
        name: "Astro",
        icon: AstroIcon,
    },
};

const PROYECTS = [
    {
        title: "Web test UMH",
        description:
            " Apartado de test de la Universidad Miguel Hernández. En esta web se pueden realizar test de diferentes asignaturas y ver los resultados obtenidos. Con aportaciones de los alumnos.",
        link: "https://coyotemmk.github.io/test-umh/",
        github: "https://github.com/coyoteMMK/test-umh",
        image: "/porfolio-santos/proyects/test-web.webp",
        tags: [TAGS.HTML, TAGS.CSS, TAGS.JavaScript, TAGS.Astro],
        important: false, // Proyecto destacado
        isLastOdd: false,
    },
    {
        title: "Simulador Code-2 Web",
        description:
            "Simulador de la aplicación Code-2. Esta aplicación permite a los alumnos de la Universidad Miguel Hernández realizar simulaciones de exámenes y ver sus resultados.",
        link: "https://coyotemmk.github.io/Simulador-code-2/",
        github: "https://github.com/coyoteMMK/Simulador-code-2",
        image: "/porfolio-santos/proyects/Simulador_code2.webp",
        tags: [TAGS.HTML, TAGS.JavaScript],
        important: false, // Proyecto destacado
        isLastOdd: false,
    },
];

let normalCount = 0;

PROYECTS.map((project) => {
    const p = { ...project };

    if (!p.important) {
        normalCount++;
    }

    return p;
});

// Si hay un número impar de normales, el último normal debe ocupar dos columnas
if (normalCount % 2 !== 0) {
    // Buscar el último proyecto que no sea importante
    // y marcarlo como importante para que ocupe dos columnas
    // Esto asegura que el último proyecto normal ocupe dos columnas
    for (let i = PROYECTS.length - 1; i >= 0; i--) {
        if (!PROYECTS[i].important) {
            PROYECTS[i] = { ...PROYECTS[i], important: true };
            break;
        }
    }
}
---

<div class="grid grid-cols-1 md:grid-cols-2 gap-10 md:grid-flow-row-dense">
    {PROYECTS.map((proyects, i) => <ProyectsItem {...proyects} />)}
</div>

<div class="flex items-center justify-center w-full mt-18 text-gray-500 dark:text-gray-300">
    <p class="text-lg">¡Pronto más proyectos!</p>
</div>
